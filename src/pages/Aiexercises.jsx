jsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';

const Aiexercises = () => {
  const [exercises, setExercises] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchExercises = async () => {
      try {
        setLoading(true);
        // Commented out: Replace with your actual API call to /api/gemini-exercises
        // const response = await fetch('/api/gemini-exercises');
        // if (!response.ok) {
        //   throw new Error(`HTTP error! status: ${response.status}`);
        // }
        // const data = await response.json();
        // await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay
        // setExercises(data.exercises);

        // Placeholder mock data for now
        const mockExercises = [
          { id: 1, title: 'AI Yoga Flow', description: 'A personalized yoga sequence generated by AI.' },
          { id: 2, title: 'Strength Training Planner', description: 'An AI-optimized strength training routine.' },
          { id: 3, title: 'Mindfulness Meditation Guide', description: 'An AI-guided meditation session.' },
        ];
        setExercises(mockExercises);
        await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate mock data delay
      } catch (err) {
        setError(err);
        console.error("Failed to fetch exercises:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchExercises();
    setLoading(false); // Still set loading to false after mock data is loaded
  }, []);


  return (
    <motion.div
      className="ai-exercises-container"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0, transition: { staggerChildren: 0.1 } }}
      transition={{ duration: 0.6 }}
    >
      <motion.h1
        className="page-title"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        AI-Based Exercises
      </motion.h1>
      {/* Loading Indicator */}
      {loading && (
        <motion.div
          className="loading-indicator"
          animate={{ rotate: 360 }}
          transition={{ duration: 1, loop: Infinity, ease: "linear" }}
        >
          Loading...
        </motion.div>)}
      {loading && <p>Loading exercises...</p>}
      {error && <p className="error-message">Error loading exercises: {error.message}</p>}

      {!loading && !error && (
        <motion.ul className="exercise-list">
          {exercises.length > 0 ? (
            exercises.map((exercise) => (
              <motion.li
                key={exercise.id}
                className="exercise-item"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5 }}
              >
                <h3>{exercise.title}</h3>
                <p>{exercise.description}</p>
                {/* Add more details or interactive elements here */}
              </motion.li>
            ))
          ) : (
            <p>No exercises available at the moment.</p>
          )}
        </motion.ul>
      )}
    </motion.div>
  );
};

export default Aiexercises;